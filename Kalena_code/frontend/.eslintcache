[{"C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\index.js":"1","C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\App.js":"2","C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\views\\store\\auth-context.js":"3","C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\layouts\\Auth\\Auth.js":"4","C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\layouts\\Admin\\Admin.js":"5","C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\components\\FormElements\\LoadingSpinner.js":"6","C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\components\\hooks\\http-hook.js":"7","C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\routes.js":"8","C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\components\\Navbars\\AuthNavbar.js":"9","C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\components\\FixedPlugin\\FixedPlugin.js":"10","C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\components\\Sidebar\\Sidebar.js":"11","C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\components\\Navbars\\AdminNavbar.js":"12","C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\views\\Dashboard.js":"13","C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\views\\Calendar.js":"14","C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\views\\pages\\User.js":"15","C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\views\\pages\\Login.js":"16","C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\views\\pages\\Register.js":"17","C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\views\\pages\\MyCourses.js":"18","C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\views\\pages\\FindMeeting.js":"19","C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\views\\pages\\Friends.js":"20","C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\views\\components\\about\\AboutUs.js":"21","C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\views\\forms\\AddGeneralEvent.js":"22","C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\views\\forms\\AddEventAlert.js":"23","C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\views\\forms\\AddMultiStudentEvent.js":"24","C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\views\\forms\\UpdateEventAlert.js":"25"},{"size":360,"mtime":1632817686688,"results":"26","hashOfConfig":"27"},{"size":978,"mtime":1632817686604,"results":"28","hashOfConfig":"27"},{"size":27557,"mtime":1632915672022,"results":"29","hashOfConfig":"27"},{"size":2005,"mtime":1632817701756,"results":"30","hashOfConfig":"27"},{"size":6427,"mtime":1632817701696,"results":"31","hashOfConfig":"27"},{"size":281,"mtime":1632817701288,"results":"32","hashOfConfig":"27"},{"size":1395,"mtime":1632817701367,"results":"33","hashOfConfig":"27"},{"size":1879,"mtime":1632817686767,"results":"34","hashOfConfig":"27"},{"size":2369,"mtime":1632817701515,"results":"35","hashOfConfig":"27"},{"size":4121,"mtime":1632817701207,"results":"36","hashOfConfig":"27"},{"size":7171,"mtime":1632817701595,"results":"37","hashOfConfig":"27"},{"size":17629,"mtime":1632817701455,"results":"38","hashOfConfig":"27"},{"size":12484,"mtime":1632817701965,"results":"39","hashOfConfig":"27"},{"size":17826,"mtime":1632817701922,"results":"40","hashOfConfig":"27"},{"size":12272,"mtime":1632846695760,"results":"41","hashOfConfig":"27"},{"size":10377,"mtime":1632821835974,"results":"42","hashOfConfig":"27"},{"size":18205,"mtime":1632839114853,"results":"43","hashOfConfig":"27"},{"size":5720,"mtime":1632817702491,"results":"44","hashOfConfig":"27"},{"size":20185,"mtime":1632915697916,"results":"45","hashOfConfig":"27"},{"size":17118,"mtime":1632817702392,"results":"46","hashOfConfig":"27"},{"size":4361,"mtime":1632817702052,"results":"47","hashOfConfig":"27"},{"size":8585,"mtime":1632840517579,"results":"48","hashOfConfig":"27"},{"size":7575,"mtime":1632817702128,"results":"49","hashOfConfig":"27"},{"size":12406,"mtime":1632840654935,"results":"50","hashOfConfig":"27"},{"size":5048,"mtime":1632817702270,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"eoopuf",{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\index.js",[],"C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\App.js",[],"C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\views\\store\\auth-context.js",["109","110"],"C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\layouts\\Auth\\Auth.js",[],"C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\layouts\\Admin\\Admin.js",[],"C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\components\\FormElements\\LoadingSpinner.js",[],"C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\components\\hooks\\http-hook.js",[],"C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\routes.js",[],"C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\components\\Navbars\\AuthNavbar.js",[],"C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\components\\FixedPlugin\\FixedPlugin.js",[],"C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\components\\Sidebar\\Sidebar.js",["111","112","113"],"import React from \"react\";\nimport { NavLink, useLocation } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\n// javascript plugin used to create scrollbars on windows\nimport PerfectScrollbar from \"perfect-scrollbar\";\n\n// reactstrap components\nimport { Nav, Collapse } from \"reactstrap\";\n\nvar ps;\n\nconst Sidebar = (props) => {\n  const [state, setState] = React.useState({});\n  const sidebarRef = React.useRef(null);\n  const location = useLocation();\n  React.useEffect(() => {\n    setState(getCollapseStates(props.routes));\n  }, []);\n\n  React.useEffect(() => {\n    // if you are using a Windows Machine, the scrollbars will have a Mac look\n    if (navigator.platform.indexOf(\"Win\") > -1) {\n      ps = new PerfectScrollbar(sidebarRef.current, {\n        suppressScrollX: true,\n        suppressScrollY: false,\n      });\n    }\n    return function cleanup() {\n      // we need to destroy the false scrollbar when we navigate\n      // to a page that doesn't have this component rendered\n      if (navigator.platform.indexOf(\"Win\") > -1) {\n        ps.destroy();\n      }\n    };\n  });\n\n  // this creates the intial state of this component based on the collapse routes\n  // that it gets through props.routes\n  const getCollapseStates = (routes) => {\n    let initialState = {};\n    routes.map((prop) => {\n      if (prop.collapse) {\n        initialState = {\n          [prop.state]: getCollapseInitialState(prop.views),\n          ...getCollapseStates(prop.views),\n          ...initialState,\n        };\n      }\n      return null;\n    });\n    return initialState;\n  };\n\n  // this verifies if any of the collapses should be default opened on a rerender of this component\n  // for example, on the refresh of the page,\n  // while on the src/views/forms/RegularForms.js - route /admin/regular-forms\n  const getCollapseInitialState = (routes) => {\n    for (let i = 0; i < routes.length; i++) {\n      if (routes[i].collapse && getCollapseInitialState(routes[i].views)) {\n        return true;\n      } else if (window.location.href.indexOf(routes[i].path) !== -1) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // this function creates the links and collapses that appear in the sidebar (left menu)\n  const createLinks = (routes) => {\n    const { rtlActive } = props;\n    return routes.map((prop, key) => {\n      if (prop.redirect) {\n        return null;\n      }\n      if (prop.collapse) {\n        var st = {};\n        st[prop[\"state\"]] = !state[prop.state];\n        return (\n          <li\n            className={getCollapseInitialState(prop.views) ? \"active\" : \"\"}\n            key={key}\n          >\n            <a\n              href=\"#kalena\"\n              data-toggle=\"collapse\"\n              aria-expanded={state[prop.state]}\n              onClick={(e) => {\n                e.preventDefault();\n                setState({ ...state, ...st });\n              }}\n            >\n              {prop.icon !== undefined ? (\n                <>\n                  <i className={prop.icon} />\n                  <p>\n                    {rtlActive ? prop.rtlName : prop.name}\n                    <b className=\"caret\" />\n                  </p>\n                </>\n              ) : (\n                <>\n                  <span className=\"sidebar-mini-icon\">\n                    {rtlActive ? prop.rtlMini : prop.mini}\n                  </span>\n\n                  <span className=\"sidebar-normal\">\n                    {rtlActive ? prop.rtlName : prop.name}\n                    <b className=\"caret\" />\n                  </span>\n                </>\n              )}\n            </a>\n            <Collapse isOpen={state[prop.state]}>\n              <ul className=\"nav\">{createLinks(prop.views)}</ul>\n            </Collapse>\n          </li>\n        );\n      }\n      return (\n        <>\n          {prop.layout !== \"/auth\" && (\n            <li className={activeRoute(prop.layout + prop.path)} key={key}>\n              <NavLink\n                to={prop.layout + prop.path}\n                activeClassName=\"\"\n                onClick={props.closeSidebar}\n              >\n                {prop.icon !== undefined ? (\n                  <>\n                    <i className={prop.icon} />\n                    <p>{rtlActive ? prop.rtlName : prop.name}</p>\n                  </>\n                ) : (\n                  <>\n                    <span className=\"sidebar-mini-icon\">\n                      {rtlActive ? prop.rtlMini : prop.mini}\n                    </span>\n\n                    <span className=\"sidebar-normal\">\n                      {rtlActive ? prop.rtlName : prop.name}\n                      <b className=\"caret\" />\n                    </span>\n                  </>\n                )}\n              </NavLink>\n            </li>\n          )}\n        </>\n      );\n    });\n  };\n\n  // verifies if routeName is the one active (in browser input)\n  const activeRoute = (routeName) => {\n    return location.pathname === routeName ? \"active\" : \"\";\n  };\n\n  const { activeColor, logo } = props;\n  let logoImg = null;\n  let logoText = null;\n  if (logo !== undefined) {\n    if (logo.outterLink !== undefined) {\n      logoImg = (\n        <a\n          href={logo.outterLink}\n          className=\"simple-text logo-mini\"\n          target=\"_blank\"\n          onClick={props.closeSidebar}\n        >\n          <div className=\"logo-img\">\n            <img src={logo.imgSrc} alt=\"react-logo\" />\n          </div>\n        </a>\n      );\n      logoText = (\n        <a\n          href={logo.outterLink}\n          className=\"simple-text logo-normal\"\n          target=\"_blank\"\n          onClick={props.closeSidebar}\n        >\n          {logo.text}\n        </a>\n      );\n    } else {\n      logoImg = (\n        <NavLink\n          to={logo.innerLink}\n          className=\"simple-text logo-mini\"\n          onClick={props.closeSidebar}\n        >\n          <div className=\"logo-img\">\n            <img src={logo.imgSrc} alt=\"react-logo\" />\n          </div>\n        </NavLink>\n      );\n      logoText = (\n        <NavLink\n          to={logo.innerLink}\n          className=\"simple-text logo-normal\"\n          onClick={props.closeSidebar}\n        >\n          {logo.text}\n        </NavLink>\n      );\n    }\n  }\n  return (\n    <div className=\"sidebar\" data={activeColor}>\n      <div className=\"sidebar-wrapper\" ref={sidebarRef}>\n        {logoImg !== null || logoText !== null ? (\n          <div className=\"logo\">\n            {logoImg}\n            {logoText}\n          </div>\n        ) : null}\n        <Nav>{createLinks(props.routes)}</Nav>\n      </div>\n    </div>\n  );\n};\n\nSidebar.propTypes = {\n  activeColor: PropTypes.oneOf([\"primary\", \"blue\", \"green\", \"orange\", \"red\"]),\n  rtlActive: PropTypes.bool,\n  routes: PropTypes.array.isRequired,\n  logo: PropTypes.oneOfType([\n    PropTypes.shape({\n      innerLink: PropTypes.string.isRequired,\n      imgSrc: PropTypes.string.isRequired,\n      text: PropTypes.string.isRequired,\n    }),\n    PropTypes.shape({\n      outterLink: PropTypes.string.isRequired,\n      imgSrc: PropTypes.string.isRequired,\n      text: PropTypes.string.isRequired,\n    }),\n  ]),\n  // this is used on responsive to close the sidebar on route navigation\n  closeSidebar: PropTypes.func,\n};\n\nexport default Sidebar;\n","C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\components\\Navbars\\AdminNavbar.js",["114"],"import React, { useContext } from \"react\";\n// nodejs library that concatenates classes\nimport classNames from \"classnames\";\nimport ReactBSAlert from \"react-bootstrap-sweetalert\";\n\n// reactstrap components\nimport {\n  Button,\n  Collapse,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  UncontrolledDropdown,\n  NavbarBrand,\n  Navbar,\n  NavLink,\n  Nav,\n  Container,\n  UncontrolledTooltip,\n  Label,\n} from \"reactstrap\";\n\nimport { Link, useHistory } from \"react-router-dom\";\nimport AuthContext from \"views/store/auth-context\";\n\nvar today = new Date();\nvar y = today.getFullYear();\nvar m = today.getMonth();\nvar d = today.getDate();\n\nconst AdminNavbar = (props) => {\n  //states to page design\n  const [collapseOpen, setCollapseOpen] = React.useState(false);\n  const [color, setColor] = React.useState(\"navbar-transparent\");\n\n  //states to user data\n  const [dayEvents, setDayEvents] = React.useState([]);\n\n  const [alert, setAlert] = React.useState(null);\n\n  const authCtx = useContext(AuthContext);\n  const isLoggedIn = authCtx.isLoggedIn;\n\n  const history = useHistory();\n\n  React.useEffect(() => {\n    window.addEventListener(\"resize\", updateColor);\n    return function cleanup() {\n      window.removeEventListener(\"resize\", updateColor);\n    };\n  });\n\n  //changing every time that userEvents state change\n  React.useEffect(() => {\n    if (authCtx.userEvents.length > 0) updateEvents();\n  }, [authCtx.userEvents]);\n\n  const hideAlert = () => {\n    setAlert(null);\n  };\n\n  // function that filters the events by today's date\n  const updateEvents = () => {\n    const allFilteredEvents = authCtx.userEvents.filter(\n      (event) =>\n        new Date(event.start_date).getFullYear() === y &&\n        new Date(event.start_date).getMonth() === m &&\n        new Date(event.start_date).getDate() === d\n    );\n    setDayEvents(allFilteredEvents);\n  };\n\n  // function that adds color white/transparent to the navbar on resize (this is for the collapse)\n  const updateColor = () => {\n    if (window.innerWidth < 993 && collapseOpen) {\n      setColor(\"bg-white\");\n    } else {\n      setColor(\"navbar-transparent\");\n    }\n  };\n\n  // this function opens and closes the collapse on small devices\n  const toggleCollapse = () => {\n    if (collapseOpen) {\n      setColor(\"navbar-transparent\");\n    } else {\n      setColor(\"bg-white\");\n    }\n    setCollapseOpen(!collapseOpen);\n  };\n\n  // function that handles the notification where user's answer is \"Yes\"\n  const handleAddMeeting = (current) => {\n    const urlUpdateNotifications = `http://localhost:8080/event/response_to_invitation/${authCtx.userId}/${current.obj_id}/Yes`;\n    authCtx.userMeetingAnswer(urlUpdateNotifications, current, true);\n\n    setAlert(\n      <ReactBSAlert\n        success\n        style={{ display: \"block\", marginTop: \"-100px\" }}\n        title=\"Congratulations !!!\"\n        onConfirm={() => hideAlert()}\n        onCancel={() => hideAlert()}\n        confirmBtnBsStyle=\"success\"\n        btnSize=\"\"\n      >\n        Meeting was added to your calendar!\n      </ReactBSAlert>\n    );\n  };\n\n  // function that handles the notification where user's answer is \"No\"\n  const handleCancelMeeting = (current) => {\n    const urlUpdateNotifications = `http://localhost:8080/event/response_to_invitation/${authCtx.userId}/${current.obj_id}/No`;\n    authCtx.userMeetingAnswer(urlUpdateNotifications, current, false);\n    setAlert(\n      <ReactBSAlert\n        style={{ display: \"block\", marginTop: \"-100px\" }}\n        title=\"Meeting has been deleted\"\n        onConfirm={() => hideAlert()}\n        onCancel={() => hideAlert()}\n        confirmBtnBsStyle=\"OK\"\n        btnSize=\"\"\n      >\n        The meeting has been removed from your meeting request list\n      </ReactBSAlert>\n    );\n  };\n\n  // function that handles the notification\n  const handleNavBarClicked = (meeting) => {\n    const closeButtonStyle = {\n      backgroundImage:\n        \"linear-gradient(to bottom left, #fd5d93, #ec250d, #fd5d93)\",\n      color: \"#ffffff\",\n      borderWidth: \"1px\",\n      borderRadius: \"30px\",\n      padding: \"8px 18px\",\n    };\n\n    setAlert(\n      <ReactBSAlert\n        warning\n        style={{ display: \"block\", marginTop: \"-100px\" }}\n        title={\"New meeting request - \" + meeting.title}\n        onConfirm={hideAlert}\n        onCancel={hideAlert}\n        closeBtnStyle={closeButtonStyle}\n        customButtons={\n          <>\n            <Button color=\"danger\" onClick={() => handleCancelMeeting(meeting)}>\n              No, delete it!\n            </Button>\n            <Button color=\"success\" onClick={() => handleAddMeeting(meeting)}>\n              Yes, add it!\n            </Button>\n          </>\n        }\n        showCloseButton\n        allowEscape\n        btnSize=\"\"\n      >\n        <br />\n        <div className=\"content\">\n          <Label style={{ color: \"black\" }} tag=\"h4\">\n            You have received a new request for a meeting. <br /> <br /> Meeting\n            Details:\n          </Label>\n          <Label style={{ color: \"black\" }}>\n            The event was created by : {meeting.creator}\n          </Label>\n          <br />\n          {meeting.invitees.length > 0 ? (\n            <Label style={{ color: \"black\" }}>\n              The students who have been invited to the event are :\n            </Label>\n          ) : (\n            \"\"\n          )}\n          <br />\n          {meeting.invitees.length > 0\n            ? meeting.invitees.map((invite) => (\n                <div>\n                  <Label style={{ color: \"black\" }}>{invite}</Label>\n                  <br />\n                </div>\n              ))\n            : \"\"}\n          <br />\n          <Label style={{ color: \"black\" }}>\n            Starts:{\" \"}\n            {new Date(meeting.start_date).toLocaleString(\"he-IL\", {\n              timeZone: \"Asia/Jerusalem\",\n              day: \"2-digit\",\n              month: \"short\",\n              year: \"numeric\",\n              weekday: \"short\",\n              hour: \"2-digit\",\n              minute: \"2-digit\",\n            })}\n            <br />\n            Ends:{\" \"}\n            {new Date(meeting.end_date).toLocaleString(\"he-IL\", {\n              timeZone: \"Asia/Jerusalem\",\n              day: \"2-digit\",\n              month: \"short\",\n              year: \"numeric\",\n              weekday: \"short\",\n              hour: \"2-digit\",\n              minute: \"2-digit\",\n            })}\n            <br />\n          </Label>\n          {meeting.description ? (\n            <div>\n              <Label>Description: {meeting.description} </Label>\n            </div>\n          ) : null}\n          {meeting.location ? (\n            <div>\n              {\" \"}\n              <Label>At: {meeting.location} </Label>{\" \"}\n            </div>\n          ) : null}\n\n          <div>\n            <Label>Repeat: {meeting.repeat}</Label>\n          </div>\n        </div>\n      </ReactBSAlert>\n    );\n  };\n\n  const handleEventsBarClicked = () => {\n    history.push(\"/admin/calendar\");\n  };\n\n  const handleFriendRequestsClick = () => {\n    history.push(\"/admin/Friends\");\n  };\n\n  // this function meant to redirect into the register page by the \"Sign Up\" button\n  const registerPageHandler = () => {\n    const path = \"/auth/register\";\n    history.push(path);\n  };\n\n  // this function meant to redirect into the register page by the \"Sign In\" button\n  const loginPageHandler = () => {\n    const path = \"/auth/login\";\n    history.push(path);\n  };\n\n  // function that handles with the logout\n  const logoutHandler = () => {\n    authCtx.logout();\n  };\n\n  return (\n    <>\n      {alert}\n      <Navbar\n        className={classNames(\"navbar-absolute\", {\n          [color]: props.location.pathname.indexOf(\"full-screen-map\") === -1,\n        })}\n        expand=\"lg\"\n      >\n        <Container fluid>\n          <div className=\"navbar-wrapper\">\n            {isLoggedIn && (\n              <div className=\"navbar-minimize d-inline\">\n                <Button\n                  className=\"minimize-sidebar btn-just-icon\"\n                  color=\"link\"\n                  id=\"tooltip209599\"\n                  onClick={props.handleMiniClick}\n                >\n                  <i className=\"tim-icons icon-align-center visible-on-sidebar-regular\" />\n                  <i className=\"tim-icons icon-bullet-list-67 visible-on-sidebar-mini\" />\n                </Button>\n                <UncontrolledTooltip\n                  delay={0}\n                  target=\"tooltip209599\"\n                  placement=\"right\"\n                >\n                  Sidebar toggle\n                </UncontrolledTooltip>\n              </div>\n            )}\n            <div\n              className={classNames(\"navbar-toggle d-inline\", {\n                toggled: props.sidebarOpened,\n              })}\n            >\n              <button\n                className=\"navbar-toggler\"\n                type=\"button\"\n                onClick={props.toggleSidebar}\n              >\n                <span className=\"navbar-toggler-bar bar1\" />\n                <span className=\"navbar-toggler-bar bar2\" />\n                <span className=\"navbar-toggler-bar bar3\" />\n              </button>\n            </div>\n            <NavbarBrand href=\"#kalena\" onClick={(e) => e.preventDefault()}>\n              {props.brandText}\n            </NavbarBrand>\n          </div>\n          <button\n            className=\"navbar-toggler\"\n            type=\"button\"\n            data-toggle=\"collapse\"\n            data-target=\"#navigation\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n            onClick={toggleCollapse}\n          >\n            <span className=\"navbar-toggler-bar navbar-kebab\" />\n            <span className=\"navbar-toggler-bar navbar-kebab\" />\n            <span className=\"navbar-toggler-bar navbar-kebab\" />\n          </button>\n          <Collapse navbar isOpen={collapseOpen}>\n            <Nav className=\"ml-auto\" navbar>\n              <UncontrolledDropdown nav>\n                <DropdownToggle\n                  caret\n                  color=\"default\"\n                  data-toggle=\"dropdown\"\n                  nav\n                >\n                  <div className=\"notification d-none d-lg-block d-xl-block\" />\n                  <i className=\"tim-icons icon-alert-circle-exc\" />\n                  <p className=\"d-lg-none\">Notifications</p>\n                </DropdownToggle>\n                <DropdownMenu className=\"dropdown-navbar\" right tag=\"ul\">\n                  {isLoggedIn &&\n                    authCtx.userNotification.length > 0 &&\n                    authCtx.userNotification.map((notification) => (\n                      <NavLink\n                        onClick={() => handleNavBarClicked(notification)}\n                        tag=\"li\"\n                      >\n                        <DropdownItem className=\"nav-item\">\n                          {notification.title\n                            ? notification.title\n                            : \"New invitation\"}\n                        </DropdownItem>\n                      </NavLink>\n                    ))}\n                  {isLoggedIn && authCtx.userNotification.length === 0 && (\n                    <NavLink tag=\"li\">\n                      <DropdownItem className=\"nav-item\">\n                        No notifications\n                      </DropdownItem>\n                    </NavLink>\n                  )}\n\n                  {!isLoggedIn && (\n                    <NavLink tag=\"li\">\n                      <DropdownItem className=\"nav-item\">\n                        In order to see your invitations you must log in\n                      </DropdownItem>\n                    </NavLink>\n                  )}\n                </DropdownMenu>\n              </UncontrolledDropdown>\n              <UncontrolledDropdown nav>\n                <DropdownToggle\n                  caret\n                  color=\"default\"\n                  data-toggle=\"dropdown\"\n                  nav\n                >\n                  <div className=\"notification d-none d-lg-block d-xl-block\" />\n                  <i className=\"tim-icons icon-time-alarm\" />\n                  <p className=\"d-lg-none\">Events</p>\n                </DropdownToggle>\n                <DropdownMenu className=\"dropdown-navbar\" right tag=\"ul\">\n                  {isLoggedIn && dayEvents.length === 0 && (\n                    <NavLink onClick={() => handleEventsBarClicked()} tag=\"li\">\n                      <DropdownItem className=\"nav-item\">\n                        No events today Click to move to calendar\n                      </DropdownItem>\n                    </NavLink>\n                  )}\n                  {!isLoggedIn && (\n                    <NavLink tag=\"li\">\n                      <DropdownItem className=\"nav-item\">\n                        In order to see your events you must log in\n                      </DropdownItem>\n                    </NavLink>\n                  )}\n                  {isLoggedIn &&\n                    dayEvents.length !== 0 &&\n                    dayEvents.map((event) => (\n                      <NavLink\n                        onClick={() => handleEventsBarClicked()}\n                        tag=\"li\"\n                      >\n                        <DropdownItem className=\"nav-item\">\n                          {event.title}\n                        </DropdownItem>\n                      </NavLink>\n                    ))}\n                </DropdownMenu>\n              </UncontrolledDropdown>\n\n              <UncontrolledDropdown nav>\n                <DropdownToggle\n                  caret\n                  color=\"default\"\n                  data-toggle=\"dropdown\"\n                  nav\n                >\n                  <div className=\"notification d-none d-lg-block d-xl-block\" />\n                  <i className=\"tim-icons icon-bell-55\" />\n                  <p className=\"d-lg-none\">Friends Requests</p>\n                </DropdownToggle>\n                <DropdownMenu className=\"dropdown-navbar\" right tag=\"ul\">\n                  {isLoggedIn && authCtx.friendsRequests.length === 0 && (\n                    <NavLink\n                      onClick={() => handleFriendRequestsClick()}\n                      tag=\"li\"\n                    >\n                      <DropdownItem className=\"nav-item\">\n                        No friends requests\n                      </DropdownItem>\n                    </NavLink>\n                  )}\n                  {!isLoggedIn && authCtx.friendsRequests.length === 0 && (\n                    <NavLink tag=\"li\">\n                      <DropdownItem className=\"nav-item\">\n                        In order to your friends requests you must log in\n                      </DropdownItem>\n                    </NavLink>\n                  )}\n                  {isLoggedIn &&\n                    authCtx.friendsRequests.length !== 0 &&\n                    authCtx.friendsRequests.map((friend) => (\n                      <NavLink\n                        onClick={() => handleFriendRequestsClick()}\n                        tag=\"li\"\n                      >\n                        <DropdownItem className=\"nav-item\">\n                          {friend.email}\n                        </DropdownItem>\n                      </NavLink>\n                    ))}\n                </DropdownMenu>\n              </UncontrolledDropdown>\n\n              {isLoggedIn && (\n                <UncontrolledDropdown nav>\n                  <DropdownToggle\n                    caret\n                    color=\"default\"\n                    data-toggle=\"dropdown\"\n                    nav\n                    onClick={(e) => e.preventDefault()}\n                  >\n                    <div className=\"photo\">\n                      <img\n                        alt=\"...\"\n                        src={require(\"assets/img/kal.png\").default}\n                      />\n                    </div>\n\n                    <b className=\"caret d-none d-lg-block d-xl-block\" />\n                    <p className=\"d-lg-none\">Log out</p>\n                  </DropdownToggle>\n                  <DropdownMenu className=\"dropdown-navbar\" right tag=\"ul\">\n                    <NavLink tag=\"li\">\n                      <DropdownItem\n                        className=\"nav-item\"\n                        tag={Link}\n                        to=\"/admin/user-profile\"\n                      >\n                        Profile\n                      </DropdownItem>\n                    </NavLink>\n                    <DropdownItem divider tag=\"li\" />\n                    <NavLink tag=\"li\">\n                      <DropdownItem\n                        className=\"nav-item\"\n                        onClick={logoutHandler}\n                        tag={Link}\n                        to=\"/admin/dashboard\"\n                      >\n                        Log out\n                      </DropdownItem>\n                    </NavLink>\n                  </DropdownMenu>\n                </UncontrolledDropdown>\n              )}\n              {!isLoggedIn && (\n                <UncontrolledDropdown nav>\n                  <Button\n                    className=\"btn-simple\"\n                    color=\"primary\"\n                    onClick={registerPageHandler}\n                  >\n                    Sign Up\n                  </Button>\n                </UncontrolledDropdown>\n              )}\n              {!isLoggedIn && (\n                <UncontrolledDropdown nav>\n                  <Button color=\"primary\" onClick={loginPageHandler}>\n                    Login\n                  </Button>\n                </UncontrolledDropdown>\n              )}\n\n              <li className=\"separator d-lg-none\" />\n            </Nav>\n          </Collapse>\n        </Container>\n      </Navbar>\n    </>\n  );\n};\n\nexport default AdminNavbar;\n","C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\views\\Dashboard.js",[],"C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\views\\Calendar.js",["115"],"import React, { useContext } from \"react\";\n\n// react component used to create a calendar with events on it\nimport { Calendar as BigCalendar, momentLocalizer } from \"react-big-calendar\";\n\nimport { useHistory } from \"react-router-dom\";\n\n// dependency plugin for react-big-calendar\nimport moment from \"moment\";\n\n// reactstrap components\nimport {\n  Card,\n  CardBody,\n  Button,\n  CardHeader,\n  CardTitle,\n  Row,\n  Col,\n  Label,\n} from \"reactstrap\";\n\nimport ReactBSAlert from \"react-bootstrap-sweetalert\";\n\nimport AddGeneralEvent from \"./forms/AddGeneralEvent\";\nimport AddMultiStudentEvent from \"./forms/AddMultiStudentEvent\";\nimport AddNewEventAlert from \"./forms/AddEventAlert\";\n\nimport AuthContext from \"./store/auth-context\";\nimport LoadingSpinner from \"components/FormElements/LoadingSpinner\";\nimport UpdateEventAlert from \"./forms/UpdateEventAlert\";\n\nconst localizer = momentLocalizer(moment);\n\nconst Calendar = () => {\n  const [alert, setAlert] = React.useState(null);\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [eventsLength, setEventsLength] = React.useState(0);\n\n  const auth = useContext(AuthContext);\n  const history = useHistory();\n\n  // The function pops up a message representing a selected holiday from the calendar\n  const messageToHoliday = (event) => {\n    setAlert(\n      <ReactBSAlert\n        success\n        style={{ display: \"block\", marginTop: \"-100px\" }}\n        title={event.title}\n        onConfirm={() => hideAlert()}\n        onCancel={() => hideAlert()}\n        confirmBtnBsStyle=\"success\"\n        confirmBtnText=\"OK\"\n        btnSize=\"\"\n      >\n        <div>\n          <br />\n          <Label>\n            From:{\" \"}\n            {event.start.toLocaleString(\"he-IL\", {\n              timeZone: \"Asia/Jerusalem\",\n              day: \"2-digit\",\n              month: \"short\",\n              year: \"numeric\",\n              weekday: \"short\",\n            })}\n          </Label>\n          <br />\n          <Label>\n            To:{\" \"}\n            {event.end.toLocaleString(\"he-IL\", {\n              timeZone: \"Asia/Jerusalem\",\n              day: \"2-digit\",\n              month: \"short\",\n              year: \"numeric\",\n              weekday: \"short\",\n            })}\n          </Label>\n          <br />\n          <Label>{event.description ? event.description : \"\"}</Label>\n          <br />\n        </div>\n      </ReactBSAlert>\n    );\n  };\n\n  // function that checks if the user is sure that he/she wants to delete the event\n  const deleteEventConfirmationAlert = (event) => {\n    setAlert(\n      <ReactBSAlert\n        style={{ display: \"block\", marginTop: \"-100px\" }}\n        title=\"Are you sure you want to delete the event?\"\n        onConfirm={() => removeEvent(event)}\n        onCancel={hideAlert}\n        confirmBtnBsStyle=\"success\"\n        cancelBtnBsStyle=\"danger\"\n        confirmBtnText=\"Yes\"\n        cancelBtnText=\"Cancel\"\n        showCancel\n        btnSize=\"\"\n      ></ReactBSAlert>\n    );\n  };\n\n  // function that removes selected event\n  const removeEvent = (event) => {\n    setIsLoading(true);\n    auth.deleteEvent(event);\n\n    setAlert(\n      <ReactBSAlert\n        success\n        style={{ display: \"block\", marginTop: \"-100px\" }}\n        title=\"Mission Accomplished!\"\n        onConfirm={() => hideAlert()}\n        onCancel={() => hideAlert()}\n        confirmBtnBsStyle=\"success\"\n        confirmBtnText=\"OK\"\n        btnSize=\"\"\n      >\n        The meeting has been deleted.\n      </ReactBSAlert>\n    );\n  };\n\n  // function that handles with updating an event\n  const updateEventForm = (eventBeforeTheUpdate) => {\n    setAlert(\n      <UpdateEventAlert\n        eventToUpdate={eventBeforeTheUpdate}\n        onConfirm={updateEvent}\n        onCancel={hideAlert}\n        dateError={dateError}\n      />\n    );\n  };\n\n  // function that updates selected event\n  const updateEvent = (event) => {\n    setIsLoading(true);\n    auth.updateEvent(event);\n    setIsLoading(false);\n\n    setAlert(\n      <ReactBSAlert\n        success\n        style={{ display: \"block\", marginTop: \"-100px\" }}\n        title=\"Mission Accomplished!\"\n        onConfirm={() => hideAlert()}\n        onCancel={() => hideAlert()}\n        confirmBtnBsStyle=\"success\"\n        confirmBtnText=\"OK\"\n        btnSize=\"\"\n      >\n        The meeting has been updated.\n      </ReactBSAlert>\n    );\n  };\n\n  // The function pops up a message representing a selected event from the calendar\n  const messageToEvent = (event) => {\n    const closeButtonStyle = {\n      backgroundImage:\n        \"linear-gradient(to bottom left, #fd5d93, #ec250d, #fd5d93)\",\n      color: \"#ffffff\",\n      borderWidth: \"1px\",\n      borderRadius: \"30px\",\n      padding: \"8px 18px\",\n    };\n\n    setAlert(\n      <ReactBSAlert\n        success\n        style={{ display: \"block\", marginTop: \"-100px\" }}\n        title={event.title}\n        onConfirm={hideAlert}\n        onCancel={hideAlert}\n        closeBtnStyle={closeButtonStyle}\n        customButtons={\n          <>\n            <Button\n              color=\"warning\"\n              onClick={() => deleteEventConfirmationAlert(event)}\n            >\n              Delete\n            </Button>\n            {event.participants.length === 0 && (\n              <Button color=\"success\" onClick={() => updateEventForm(event)}>\n                Update\n              </Button>\n            )}\n          </>\n        }\n        showCloseButton\n        allowEscape\n        btnSize=\"\"\n      >\n        <div>\n          <br />\n          <Label>The event was created by: {event.creator}</Label>\n          <Label>\n            <div>\n              {event.participants.length > 0 && (\n                <Label>\n                  The students who confirmed their arrival are: <br />\n                </Label>\n              )}\n              {event.participants.length > 0 &&\n                event.participants.map((participant) => (\n                  <div>\n                    <Label>{participant}</Label>\n                    <br />\n                  </div>\n                ))}\n            </div>\n          </Label>\n          <br />\n          <Label>\n            From:{\" \"}\n            {event.start.toLocaleString(\"he-IL\", {\n              timeZone: \"Asia/Jerusalem\",\n              day: \"2-digit\",\n              month: \"short\",\n              year: \"numeric\",\n              weekday: \"short\",\n              hour: \"2-digit\",\n              minute: \"2-digit\",\n            })}\n          </Label>\n          <br />\n          <Label>\n            To:{\" \"}\n            {event.end.toLocaleString(\"he-IL\", {\n              timeZone: \"Asia/Jerusalem\",\n              day: \"2-digit\",\n              month: \"short\",\n              year: \"numeric\",\n              weekday: \"short\",\n              hour: \"2-digit\",\n              minute: \"2-digit\",\n            })}\n          </Label>\n          {event.description ? (\n            <div>\n              <Label>Description: {event.description} </Label>\n            </div>\n          ) : null}\n          {event.location ? (\n            <div>\n              {\" \"}\n              <Label>At: {event.location} </Label>{\" \"}\n            </div>\n          ) : null}\n\n          <div>\n            <Label>Repeat: {event.repeat}</Label>\n          </div>\n        </div>\n      </ReactBSAlert>\n    );\n  };\n\n  const moveToCourses = () => {\n    history.push(\"/admin/my-courses\");\n  };\n\n  // The function pops up a message representing a selected course from the calendar\n  const messageCourse = (event) => {\n    const closeButtonStyle = {\n      backgroundImage:\n        \"linear-gradient(to bottom left, #fd5d93, #ec250d, #fd5d93)\",\n      color: \"#ffffff\",\n      borderWidth: \"1px\",\n      borderRadius: \"30px\",\n      padding: \"8px 18px\",\n    };\n\n    setAlert(\n      <ReactBSAlert\n        success\n        style={{ display: \"block\", marginTop: \"-100px\" }}\n        title={event.title}\n        onConfirm={() => moveToCourses()}\n        onCancel={() => hideAlert()}\n        closeBtnStyle={closeButtonStyle}\n        confirmBtnBsStyle=\"success\"\n        cancelBtnBsStyle=\"info\"\n        confirmBtnText=\"Move To See Your Courses\"\n        showCloseButton\n        allowEscape\n        btnSize=\"\"\n      >\n        <div>\n          <br />\n          <Label>\n            From:{\" \"}\n            {event.start.toLocaleString(\"he-IL\", {\n              timeZone: \"UTC\",\n              day: \"2-digit\",\n              month: \"short\",\n              year: \"numeric\",\n              weekday: \"short\",\n              hour: \"2-digit\",\n              minute: \"2-digit\",\n            })}\n          </Label>\n          <br />\n          <Label>\n            To:{\" \"}\n            {event.end.toLocaleString(\"he-IL\", {\n              timeZone: \"UTC\",\n              day: \"2-digit\",\n              month: \"short\",\n              year: \"numeric\",\n              weekday: \"short\",\n              hour: \"2-digit\",\n              minute: \"2-digit\",\n            })}\n          </Label>\n          <br />\n          <Label>{event.description ? event.description : \"\"}</Label>\n          <br />\n          <Label>{event.address ? \"At: \" + event.address : \"\"}</Label>\n          <br />\n          <Label>Repeat: {event.repeat}</Label>\n          <Label style={{ color: \"black\" }} tag=\"h4\"></Label>\n        </div>\n      </ReactBSAlert>\n    );\n  };\n\n  // function check if the choosen event is course or user event and pop up description message\n  const selectedEvent = (event) => {\n    if (event.holiday) messageToHoliday(event);\n    else if (\n      event.description !== \"semester A\" &&\n      event.description !== \"semester B\"\n    ) {\n      messageToEvent(event);\n    } else {\n      messageCourse(event);\n    }\n  };\n\n  const hideAlert = () => {\n    setAlert(null);\n  };\n\n  // component to add general event\n  const addGeneralEvent = (slot) => {\n    setAlert(\n      slot === null ? (\n        <AddGeneralEvent\n          onCancel={hideAlert}\n          onConfirm={addCustomEvent}\n          resetDate={null}\n        />\n      ) : (\n        <AddGeneralEvent\n          resetDate={slot}\n          onCancel={hideAlert}\n          onConfirm={addCustomEvent}\n        />\n      )\n    );\n  };\n\n  // compnent to add multi-student event\n  const addMultiEvent = () => {\n    setAlert(\n      <AddMultiStudentEvent\n        title={\"Student Appointment\"}\n        onCancel={hideAlert}\n        onConfirm={addMultiStudentEvent}\n      />\n    );\n  };\n\n  // component to add event, the event depends on the button that the user clicked\n  const addButtonEventAlert = (myTitle) => {\n    setAlert(\n      <AddNewEventAlert\n        title={myTitle}\n        onCancel={hideAlert}\n        onConfirm={addCustomEvent}\n      />\n    );\n  };\n\n  const findMeetingClickHandler = () => {\n    history.push(\"/admin/FindMeeting\");\n  };\n\n  // function that adds an event\n  const addCustomEvent = (\n    myTitle,\n    address,\n    description,\n    repeat,\n    startDate,\n    endDate,\n    myColor,\n    allDay,\n    validationState\n  ) => {\n    if (validationState) {\n      if (startDate.getTime() > endDate.getTime()) dateError();\n      else {\n        let myEvent = {\n          creator: auth.userEmail,\n          title: myTitle,\n          start: startDate,\n          end: endDate,\n          invitees: [],\n          description: description,\n          location: address,\n          repeat: repeat,\n          color: myColor,\n          all_day: allDay,\n        };\n        setAlert(null);\n\n        setIsLoading(true);\n        auth.addEvent(true, myEvent);\n      }\n    } else {\n      setIsLoading(false);\n      exceptionHandler();\n    }\n  };\n\n  React.useEffect(() => {\n    setIsLoading(true);\n  }, []);\n\n  React.useEffect(() => {\n    if (auth.userEvents.length > 0) {\n      setIsLoading(false);\n      setEventsLength(auth.userEvents.length);\n    }\n  }, [auth.userEvents.length]);\n\n  React.useEffect(() => {\n    if (auth.userEvents.length > eventsLength) {\n      setIsLoading(false);\n      setEventsLength(auth.userEvents.length);\n    }\n  }, [auth.userEvents]);\n\n  // pop up error message\n  const dateError = () => {\n    setAlert(\n      <ReactBSAlert\n        style={{ display: \"block\", marginTop: \"-100px\" }}\n        title=\"Invalid date\"\n        onConfirm={() => hideAlert()}\n        onCancel={() => hideAlert()}\n        confirmBtnBsStyle=\"success\"\n        confirmBtnText=\"OK\"\n        btnSize=\"\"\n      />\n    );\n  };\n\n  const passeedDateAlert = () => {\n    setAlert(\n      <ReactBSAlert\n        style={{ display: \"block\", marginTop: \"-100px\" }}\n        title=\"Sorry but it is not possible to make an appointment for a past date.\"\n        onConfirm={() => hideAlert()}\n        confirmBtnBsStyle=\"danger\"\n        btnSize=\"\"\n      />\n    );\n  };\n\n  // function that adds a multi-student event\n  const addMultiStudentEvent = (\n    myTitle,\n    description,\n    address,\n    repeat,\n    inviteesList,\n    startDate,\n    endDate,\n    myColor,\n    validation\n  ) => {\n    if (validation) {\n      const today = new Date();\n      if (startDate.getTime() < today.getTime()) passeedDateAlert();\n      else {\n        if (startDate.getTime() > endDate.getTime()) dateError();\n        else {\n          let myEvent = {\n            creator: auth.userEmail,\n            title: myTitle,\n            start: startDate,\n            end: endDate,\n            invitees: inviteesList,\n            description: description,\n            location: address,\n            repeat: repeat,\n            color: myColor,\n            all_day: false,\n          };\n\n          setAlert(null);\n          setIsLoading(true);\n          auth.addEvent(true, myEvent);\n        }\n      }\n    } else {\n      setIsLoading(false);\n      exceptionHandler();\n    }\n  };\n\n  React.useEffect(() => {\n    if (auth.finishToAdd) {\n      setIsLoading(false);\n    }\n  }, [auth.finishToAdd]);\n\n  // pop up to exception\n  const exceptionHandler = () => {\n    setAlert(\n      <ReactBSAlert\n        style={{ display: \"block\", marginTop: \"-100px\" }}\n        title=\"Sorry !!\"\n        onConfirm={() => hideAlert()}\n        onCancel={() => hideAlert()}\n        confirmBtnBsStyle=\"success\"\n        confirmBtnText=\"OK\"\n        btnSize=\"\"\n      >\n        Something did not work. <br />\n        Please try again and check the values ​​you have entered.\n      </ReactBSAlert>\n    );\n  };\n\n  // function that changes the background color of the event\n  const eventColors = (event) => {\n    var backgroundColor = \"event-\";\n    event.color\n      ? (backgroundColor = backgroundColor + event.color)\n      : (backgroundColor = backgroundColor + \"default\");\n    return {\n      className: backgroundColor,\n    };\n  };\n\n  return (\n    <>\n      <div className=\"content\">\n        {alert}\n        {auth.isLoggedIn ? (\n          <Row>\n            <Col className=\"ml-auto mr-auto\">\n              <Row>\n                <Button\n                  onClick={() => findMeetingClickHandler()}\n                  style={{ margin: \"auto\", height: \"2.5cm\", width: \"4.5cm\" }}\n                  color=\"info\"\n                >\n                  Find time for a Multi-Participant meeting\n                </Button>\n              </Row>\n              <br />\n              <Row>\n                <Button\n                  style={{ margin: \"auto\", height: \"2.5cm\", width: \"4.5cm\" }}\n                  color=\"default\"\n                  onClick={addMultiEvent}\n                >\n                  Add A Multi-Student Event\n                </Button>\n              </Row>\n              <br />\n              <Row>\n                <Button\n                  style={{ margin: \"auto\", height: \"2.5cm\", width: \"4.5cm\" }}\n                  color=\"primary\"\n                  onClick={() => addButtonEventAlert(\"Work\")}\n                >\n                  Add Work Schedule\n                </Button>\n              </Row>\n              <br />\n              <Row>\n                <Button\n                  style={{ margin: \"auto\", height: \"2.5cm\", width: \"4.5cm\" }}\n                  color=\"success\"\n                  onClick={() => addButtonEventAlert(\"Medical Care\")}\n                >\n                  Add Medical Care\n                </Button>\n              </Row>\n              <br />\n              <Row>\n                <Button\n                  style={{ margin: \"auto\", height: \"2.5cm\", width: \"4.5cm\" }}\n                  color=\"warning\"\n                  onClick={() => addButtonEventAlert(\"Workout\")}\n                >\n                  Add Workout Schedule\n                </Button>\n              </Row>\n              <br />\n              <Row>\n                <Button\n                  style={{ margin: \"auto\", height: \"2.5cm\", width: \"4.5cm\" }}\n                  color=\"danger\"\n                  onClick={() => addGeneralEvent()}\n                >\n                  Add General Schedule\n                </Button>\n              </Row>\n            </Col>\n            <Col className=\"ml-auto mr-auto\" md=\"10\">\n              <Card className=\"card-calendar\">\n                <CardBody>\n                  {isLoading && <LoadingSpinner asOverlay />}\n                  <BigCalendar\n                    selectable\n                    localizer={localizer}\n                    events={auth.userEvents}\n                    defaultView=\"month\"\n                    scrollToTime={new Date(1970, 1, 1, 6)}\n                    defaultDate={new Date()}\n                    onSelectEvent={(event) => selectedEvent(event)}\n                    onSelectSlot={(slot) => addGeneralEvent(slot)}\n                    eventPropGetter={eventColors}\n                  />\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n        ) : (\n          <Card style={{ width: \"20cm\", marginLeft: \"7cm\", marginTop: \"2cm\" }}>\n            <CardHeader>\n              <CardTitle tag=\"h2\">Hello</CardTitle>\n            </CardHeader>\n            <CardBody>\n              <Label tag=\"h4\">\n                In order to use our website you must log-in or register.\n              </Label>\n            </CardBody>\n          </Card>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default Calendar;\n","C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\views\\pages\\User.js",[],"C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\views\\pages\\Login.js",["116","117"],"import React, { useState, useReducer, useEffect, useContext } from \"react\";\n\nimport classnames from \"classnames\";\n\n// reactstrap components\nimport {\n  Button,\n  Card,\n  CardHeader,\n  FormGroup,\n  CardBody,\n  CardFooter,\n  CardTitle,\n  Form,\n  Input,\n  InputGroupAddon,\n  InputGroupText,\n  InputGroup,\n  Container,\n  Col,\n} from \"reactstrap\";\n\nimport ReactBSAlert from \"react-bootstrap-sweetalert\";\n\nimport LoadingSpinner from \"components/FormElements/LoadingSpinner.js\";\n\nimport { useHistory } from \"react-router-dom\";\nimport AuthContext from \"views/store/auth-context\";\nimport { useHttpClient } from \"../../components/hooks/http-hook.js\";\n\n// function that returns true if value is email, false otherwise\nconst verifyEmail = (value) => {\n  var emailRex =\n    /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  if (emailRex.test(value)) {\n    return true;\n  }\n  return false;\n};\n\nconst emailReducer = (state, action) => {\n  if (action.type === \"USER_INPUT\") {\n    return { value: action.val, isValid: verifyEmail(action.val) };\n  }\n  if (action.type === \"INPUT_BLUR\") {\n    return {\n      value: state.value,\n      isValid: verifyEmail(state.value),\n    };\n  }\n  return { value: \"\", isValid: false };\n};\n\nconst passwordReducer = (state, action) => {\n  if (action.type === \"USER_INPUT\") {\n    return {\n      value: action.val,\n      isValid: action.val.trim().length > 6,\n    };\n  }\n  if (action.type === \"INPUT_BLUR\") {\n    return {\n      value: state.value,\n      isValid: state.value.trim().length > 6,\n    };\n  }\n  return { value: \"\", isValid: false };\n};\n\nconst Login = () => {\n  const [alert, setAlert] = useState(null);\n  const [state, setState] = useState({});\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n  const [enteredPasswordTouched, setEnteredPasswordTouched] = useState(false);\n\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {\n    value: \"\",\n    isValid: null,\n  });\n  const [passwordState, dispatchPassword] = useReducer(passwordReducer, {\n    value: \"\",\n    isValid: null,\n  });\n\n  useEffect(() => {\n    document.body.classList.toggle(\"login-page\");\n    return function cleanup() {\n      document.body.classList.toggle(\"login-page\");\n    };\n  });\n\n  const { sendRequest } = useHttpClient();\n\n  const history = useHistory();\n  const authCtx = useContext(AuthContext);\n\n  const { isValid: emailIsValid } = emailState;\n  const { isValid: passwordIsValid } = passwordState;\n\n  useEffect(() => {\n    if (authCtx.finishLoggin) {\n      const path = \"/admin\" + \"/dashboard\";\n      history.replace(path);\n    }\n  }, [authCtx.finishLoggin]);\n\n  const emailChangeHandler = (event) => {\n    setState({ ...state, emailFocus: true });\n    dispatchEmail({ type: \"USER_INPUT\", val: event.target.value });\n  };\n\n  const passwordChangeHandler = (event) => {\n    setState({ ...state, passFocus: true });\n    dispatchPassword({ type: \"USER_INPUT\", val: event.target.value });\n  };\n\n  const validateEmailHandler = () => {\n    setState({ ...state, emailFocus: false });\n    dispatchEmail({ type: \"INPUT_BLUR\" });\n    setEnteredEmailTouched(true);\n  };\n\n  const validatePasswordHandler = () => {\n    setState({ ...state, passFocus: false });\n    dispatchPassword({ type: \"INPUT_BLUR\" });\n    setEnteredPasswordTouched(true);\n  };\n\n  // function that handles the authentication of the user and references to the dashboard page\n  const dashboardPageHandler = async () => {\n    const { value: emailValue } = emailState;\n    const { value: passwordIValue } = passwordState;\n\n    const enteredEmail = emailValue;\n    const enteredPassword = passwordIValue;\n\n    const url = \"http://localhost:8080/login/user_login\";\n\n    try {\n      setIsLoading(true);\n\n      const responseData = await sendRequest(\n        url,\n        \"POST\",\n        JSON.stringify({\n          username: enteredEmail,\n          password: enteredPassword,\n        }),\n        {\n          \"Content-Type\": \"application/json\",\n        }\n      );\n\n      const dataExpires = new Date(Math.floor(responseData.expires * 1000)); // number of miliseconds since epoch\n\n      // saves user's authentication\n      authCtx.login(\n        responseData.obj_id,\n        responseData.token,\n        responseData.email,\n        dataExpires\n      );\n    } catch (err) {\n      setIsLoading(false);\n      loginErrorAlert();\n    }\n  };\n\n  const loginErrorAlert = () => {\n    setAlert(\n      <ReactBSAlert\n        style={{ display: \"block\", marginTop: \"-100px\" }}\n        title=\"Error...\"\n        onConfirm={() => hideAlert()}\n        confirmBtnBsStyle=\"OK\"\n        btnSize=\"\"\n      >\n        Invalid email or password.\n        <br />\n        Please try again.\n      </ReactBSAlert>\n    );\n  };\n\n  // this function meant to redirect into the register page by the \"Sign Up\" button\n  const registerPageHandler = (e) => {\n    e.preventDefault();\n    const path = \"/auth/register\";\n    history.push(path);\n  };\n\n  const handleKeypress = (e) => {\n    //it triggers by pressing the enter key\n    if (e.charCode === 13) {\n      dashboardPageHandler();\n    }\n  };\n\n  const hideAlert = () => {\n    setAlert(null);\n  };\n\n  return (\n    <>\n      <div className=\"content\">\n        {alert}\n        <Container>\n          <Col className=\"ml-auto mr-auto\" lg=\"4\" md=\"6\">\n            <Form className=\"form\">\n              <Card\n                className=\"card-login card-white\"\n                style={{ width: \"9cm\", height: \"12cm\" }}\n              >\n                <CardHeader>\n                  <img\n                    style={{ width: \"100%\", height: \"100%\" }}\n                    alt=\"...\"\n                    src={require(\"assets/img/card-primary.png\").default}\n                  />\n                  <CardTitle\n                    style={{\n                      textTransform: \"none\",\n                      fontSize: 60,\n                      marginTop: 15,\n                      marginLeft: 73,\n                    }}\n                    tag=\"h1\"\n                  >\n                    Log in\n                  </CardTitle>\n                </CardHeader>\n                <CardBody>\n                  <InputGroup\n                    className={classnames({\n                      \"input-group-focus\": state.emailFocus,\n                    })}\n                  >\n                    <InputGroupAddon addonType=\"prepend\">\n                      <InputGroupText\n                        style={{\n                          borderColor:\n                            !emailIsValid && enteredEmailTouched\n                              ? \"#e14eca\"\n                              : \"#9a9a9a\",\n                        }}\n                      >\n                        <i className=\"tim-icons icon-email-85\" />\n                      </InputGroupText>\n                    </InputGroupAddon>\n                    <Input\n                      style={{\n                        borderColor:\n                          !emailIsValid && enteredEmailTouched\n                            ? \"#e14eca\"\n                            : \"#9a9a9a\",\n                      }}\n                      placeholder=\"Email\"\n                      type=\"text\"\n                      onKeyPress={handleKeypress}\n                      onChange={emailChangeHandler}\n                      onBlur={validateEmailHandler}\n                    />\n                  </InputGroup>\n                  <FormGroup>\n                    {!emailIsValid && enteredEmailTouched && (\n                      <label style={{ color: \"#b40e0e\" }}>Invalid email.</label>\n                    )}\n                  </FormGroup>\n\n                  <InputGroup\n                    className={classnames({\n                      \"input-group-focus\": state.passFocus,\n                    })}\n                  >\n                    <InputGroupAddon addonType=\"prepend\">\n                      <InputGroupText\n                        style={{\n                          borderColor:\n                            !passwordIsValid && enteredPasswordTouched\n                              ? \"#e14eca\"\n                              : \"#9a9a9a\",\n                        }}\n                      >\n                        <i className=\"tim-icons icon-lock-circle\" />\n                      </InputGroupText>\n                    </InputGroupAddon>\n                    <Input\n                      style={{\n                        borderColor:\n                          !passwordIsValid && enteredPasswordTouched\n                            ? \"#e14eca\"\n                            : \"#9a9a9a\",\n                      }}\n                      placeholder=\"Password\"\n                      type=\"password\"\n                      onKeyPress={handleKeypress}\n                      onChange={passwordChangeHandler}\n                      onBlur={validatePasswordHandler}\n                    />\n                  </InputGroup>\n                  <FormGroup>\n                    {!passwordIsValid && enteredPasswordTouched && (\n                      <div className=\"category form-category\">\n                        <label style={{ color: \"#b40e0e\" }}>\n                          Password must contain more than 6 charactars.\n                        </label>\n                      </div>\n                    )}\n                  </FormGroup>\n                </CardBody>\n                <CardFooter>\n                  <Button\n                    block\n                    className=\"mb-3\"\n                    type=\"submit\"\n                    color=\"primary\"\n                    href=\"#kalena\"\n                    onClick={dashboardPageHandler}\n                    size=\"lg\"\n                  >\n                    {isLoading && <LoadingSpinner asOverlay />}\n                    Login\n                  </Button>\n                  <div className=\"pull-left\">\n                    <h6>\n                      <a\n                        className=\"link footer-link\"\n                        href=\"#kalena\"\n                        onClick={registerPageHandler}\n                      >\n                        Create Account\n                      </a>\n                    </h6>\n                  </div>\n                </CardFooter>\n              </Card>\n            </Form>\n          </Col>\n        </Container>\n      </div>\n    </>\n  );\n};\n\nexport default Login;\n","C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\views\\pages\\Register.js",[],"C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\views\\pages\\MyCourses.js",[],"C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\views\\pages\\FindMeeting.js",[],"C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\views\\pages\\Friends.js",["118","119"],"import React, { useContext, useCallback } from \"react\";\r\n// reactstrap components\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  Table,\r\n  FormGroup,\r\n  CardTitle,\r\n  Input,\r\n  Row,\r\n  Label,\r\n} from \"reactstrap\";\r\n\r\nimport ReactBSAlert from \"react-bootstrap-sweetalert\";\r\nimport AuthContext from \"views/store/auth-context\";\r\nimport LoadingSpinner from \"components/FormElements/LoadingSpinner\";\r\nimport { useHttpClient } from \"../../components/hooks/http-hook.js\";\r\n\r\nconst Friends = () => {\r\n  const [alert, setAlert] = React.useState(null);\r\n\r\n  //enmail state value and vaidation\r\n  const [email, setEmail] = React.useState(\"\");\r\n  const [emailState, setEmailState] = React.useState(\"\");\r\n\r\n  const [isLoading, setIsLoading] = React.useState(false);\r\n\r\n  //user and freind mutual event list\r\n  const [mutualEvents, setMutualEvets] = React.useState([]);\r\n\r\n  //boolean state to detect changes in mutual event list\r\n  const [mutualEventsaAreTotallyRendered, setMutualEventsaAreTotallyRendered] =\r\n    React.useState(false);\r\n  //state to get the choosen friend index\r\n  const [currentFriendIndex, setCurrentFriendIndex] = React.useState(-1);\r\n\r\n  const { sendRequest } = useHttpClient();\r\n\r\n  const authCtx = useContext(AuthContext);\r\n\r\n  //pop up to exception\r\n  const exceptionHandler = () => {\r\n    setAlert(\r\n      <ReactBSAlert\r\n        style={{ display: \"block\", marginTop: \"-100px\" }}\r\n        title=\"Sorry!\"\r\n        onConfirm={() => hideAlert()}\r\n        onCancel={() => hideAlert()}\r\n        confirmBtnBsStyle=\"OK\"\r\n        btnSize=\"\"\r\n      >\r\n        Something did not work. <br />\r\n        Please try again and check the values ​​you entered\r\n      </ReactBSAlert>\r\n    );\r\n  };\r\n\r\n  //Pop-up message to update the user that he entered an incorrect email\r\n  const emailError = (err) => {\r\n    setAlert(\r\n      <ReactBSAlert\r\n        style={{ display: \"block\", marginTop: \"-100px\" }}\r\n        title=\"Sorry...\"\r\n        onConfirm={() => hideAlert()}\r\n        confirmBtnBsStyle=\"OK\"\r\n        btnSize=\"\"\r\n      >\r\n        {err}\r\n        <br />\r\n      </ReactBSAlert>\r\n    );\r\n  };\r\n\r\n  //The function requests from the database a list of recommendations for scheduling a meeting for all the\r\n  //students that the user requested to add to the meeting\r\n  const getCommonMeetings = async (id) => {\r\n    const urlFriendsMutualEvents = `http://localhost:8080/friends/get_mutual_events/${authCtx.userId}/${id}`;\r\n\r\n    try {\r\n      const responseData = await sendRequest(\r\n        urlFriendsMutualEvents,\r\n        \"GET\",\r\n        null,\r\n        {\r\n          Authorization: \"Bearer \" + authCtx.token,\r\n        }\r\n      );\r\n\r\n      const mutualEvents = responseData.data;\r\n      setMutualEvets(mutualEvents);\r\n    } catch (err) {\r\n      console.log(err.message || \"Something went wrong, please try again.\");\r\n      exceptionHandler();\r\n    }\r\n  };\r\n\r\n  // function that returns true if value is email, false otherwise\r\n  const verifyEmail = (value) => {\r\n    var emailRex =\r\n      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    if (emailRex.test(value)) {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  //function change email state and email validation state\r\n  const changeEmail = (email) => {\r\n    if (verifyEmail(email.target.value)) {\r\n      setEmailState(\"has-success\");\r\n    } else {\r\n      setEmailState(\"has-danger\");\r\n    }\r\n    setEmail(email.target.value);\r\n  };\r\n\r\n  //The function sends the membership request according to the email it received\r\n  const addClickHandle = async () => {\r\n    if (email !== \"\" && emailState === \"has-success\") {\r\n      const urlSendFriendRequest = `http://localhost:8080/friends/send_friend_req/${authCtx.userId}/${email}`;\r\n\r\n      try {\r\n        setIsLoading(true);\r\n\r\n        await sendRequest(urlSendFriendRequest, \"PATCH\", null, {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: \"Bearer \" + authCtx.token,\r\n        });\r\n\r\n        setEmail(\"\");\r\n        setIsLoading(false);\r\n        addFriendSuccessAlert();\r\n      } catch (err) {\r\n        setIsLoading(false);\r\n        emailError(err.message);\r\n      }\r\n    }\r\n  };\r\n\r\n  //pop up to add friend success\r\n  const addFriendSuccessAlert = () => {\r\n    setAlert(\r\n      <ReactBSAlert\r\n        style={{ display: \"block\", marginTop: \"-100px\" }}\r\n        title=\"Well Done !!\"\r\n        onConfirm={() => hideAlert()}\r\n        confirmBtnBsStyle=\"success\"\r\n        confirmBtnText=\"OK\"\r\n        btnSize=\"\"\r\n      >\r\n        The request has been sent successfully.\r\n      </ReactBSAlert>\r\n    );\r\n  };\r\n\r\n  //pop up to add friend success\r\n  const approveSuccessAlert = () => {\r\n    setAlert(\r\n      <ReactBSAlert\r\n        style={{ display: \"block\", marginTop: \"-100px\" }}\r\n        title=\"Well Done !!\"\r\n        onConfirm={() => hideAlert()}\r\n        confirmBtnBsStyle=\"success\"\r\n        confirmBtnText=\"OK\"\r\n        btnSize=\"\"\r\n      >\r\n        The request has been approved successfully.\r\n      </ReactBSAlert>\r\n    );\r\n  };\r\n\r\n  //pop up to add friend success\r\n  const cancelSuccessAlert = () => {\r\n    setAlert(\r\n      <ReactBSAlert\r\n        style={{ display: \"block\", marginTop: \"-100px\" }}\r\n        title=\"Well Done !!\"\r\n        onConfirm={() => hideAlert()}\r\n        confirmBtnBsStyle=\"success\"\r\n        confirmBtnText=\"OK\"\r\n        btnSize=\"\"\r\n      >\r\n        The request has been cancel.\r\n      </ReactBSAlert>\r\n    );\r\n  };\r\n\r\n  // function that adds the current membership request from the list according to the index it receives\r\n  const addClickHandler = async (index) => {\r\n    const urlApproveFriendRequest = `http://localhost:8080/friends/approved_friend_req/${authCtx.userId}/${authCtx.friendsRequests[index].obj_id}`;\r\n\r\n    try {\r\n      setIsLoading(true);\r\n\r\n      await sendRequest(urlApproveFriendRequest, \"PATCH\", null, {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: \"Bearer \" + authCtx.token,\r\n      });\r\n\r\n      authCtx.updateFriends(authCtx.token, authCtx.userId);\r\n      authCtx.updateFriendsRequests(authCtx.token, authCtx.userId);\r\n      setIsLoading(false);\r\n      approveSuccessAlert();\r\n    } catch (err) {\r\n      setIsLoading(false);\r\n      exceptionHandler();\r\n    }\r\n  };\r\n\r\n  const cancelClickHandler = async (index) => {\r\n    const urlDeclineFriendRequest = `http://localhost:8080/friends/decline_friend_req/${authCtx.userId}/${authCtx.friendsRequests[index].obj_id}`;\r\n\r\n    try {\r\n      setIsLoading(true);\r\n\r\n      await sendRequest(urlDeclineFriendRequest, \"PATCH\", null, {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: \"Bearer \" + authCtx.token,\r\n      });\r\n\r\n      authCtx.updateFriendsRequests(authCtx.token, authCtx.userId);\r\n      setIsLoading(false);\r\n      cancelSuccessAlert();\r\n    } catch (err) {\r\n      setIsLoading(false);\r\n      console.log(err.message || \"Something went wrong, please try again.\");\r\n      exceptionHandler();\r\n    }\r\n  };\r\n\r\n  const alertCommonMeeting = useCallback(\r\n    (index) => {\r\n      setAlert(\r\n        <ReactBSAlert\r\n          style={{\r\n            display: \"block\",\r\n            marginTop: \"-100px\",\r\n            color: \"black\",\r\n            width: \"22cm\",\r\n          }}\r\n          title={\"Common Meetings With \" + authCtx.friends[index].first_name}\r\n          onConfirm={() => hideAlert()}\r\n          onCancel={() => hideAlert()}\r\n          confirmBtnBsStyle=\"success\"\r\n          confirmBtnText=\"OK\"\r\n          btnSize=\"\"\r\n        >\r\n          <br />\r\n          <Row\r\n            style={{\r\n              margin: \"auto\",\r\n              alignItems: \"center\",\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n            }}\r\n          >\r\n            <table\r\n              style={{\r\n                color: \"balck\",\r\n                borderSpacing: \"15px\",\r\n                borderCollapse: \"separate\",\r\n              }}\r\n            >\r\n              <thead className=\"text-primary\">\r\n                <tr key=\"-1\">\r\n                  <th className=\"text-center\">Title</th>\r\n                  <th className=\"text-center\">Start</th>\r\n                  <th className=\"text-center\">End</th>\r\n                  <th className=\"text-center\">Participants</th>\r\n                  <th className=\"text-center\">Repeat</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {mutualEvents.map((meeting, index) => (\r\n                  <tr key={index}>\r\n                    <td className=\"text-center\">{meeting.title}</td>\r\n                    <td className=\"text-center\">\r\n                      {new Date(meeting.start_date).toLocaleString(\"he-IL\", {\r\n                        timeZone: \"Asia/Jerusalem\",\r\n                        day: \"2-digit\",\r\n                        month: \"short\",\r\n                        year: \"numeric\",\r\n                        weekday: \"short\",\r\n                      })}\r\n                    </td>\r\n                    <td className=\"text-center\">\r\n                      {new Date(meeting.end_date).toLocaleString(\"he-IL\", {\r\n                        timeZone: \"Asia/Jerusalem\",\r\n                        day: \"2-digit\",\r\n                        month: \"short\",\r\n                        year: \"numeric\",\r\n                        weekday: \"short\",\r\n                      })}\r\n                    </td>\r\n                    <td className=\"text-center\">\r\n                      {meeting.participants.length}\r\n                    </td>\r\n                    <td className=\"text-center\">{meeting.repeat}</td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </Row>\r\n        </ReactBSAlert>\r\n      );\r\n    },\r\n    [mutualEvents]\r\n  );\r\n\r\n  //The function displays the list of shared meetings with the selected member from the list\r\n  const trClickHandler = (index) => {\r\n    setCurrentFriendIndex(index);\r\n    getCommonMeetings(authCtx.friends[index].obj_id);\r\n  };\r\n\r\n  //runs each time that mutual events changes.\r\n  React.useEffect(() => {\r\n    if (mutualEventsaAreTotallyRendered) {\r\n      alertCommonMeeting(currentFriendIndex);\r\n    }\r\n\r\n    setMutualEventsaAreTotallyRendered(true);\r\n  }, [mutualEvents]);\r\n\r\n  //function remove friend from friends llist and DB\r\n  const removeFriendHandler = async (index) => {\r\n    const urlDeleteFriend = `http://localhost:8080/friends/delete_friend/${authCtx.userId}/${authCtx.friends[index].obj_id}`;\r\n\r\n    try {\r\n      setIsLoading(true);\r\n\r\n      await sendRequest(urlDeleteFriend, \"DELETE\", null, {\r\n        Authorization: \"Bearer \" + authCtx.token,\r\n      });\r\n\r\n      authCtx.updateFriends(authCtx.token, authCtx.userId);\r\n      authCtx.updateFriendsRequests(authCtx.token, authCtx.userId);\r\n      setIsLoading(false);\r\n      deleteFriendAlert();\r\n    } catch (err) {\r\n      setIsLoading(false);\r\n      exceptionHandler();\r\n    }\r\n  };\r\n\r\n  const deleteFriendAlert = () => {\r\n    setAlert(\r\n      <ReactBSAlert\r\n        success\r\n        style={{ display: \"block\", marginTop: \"-100px\" }}\r\n        title=\"Mission Accomplished !!!\"\r\n        onConfirm={() => hideAlert()}\r\n        onCancel={() => hideAlert()}\r\n        confirmBtnBsStyle=\"OK\"\r\n        btnSize=\"\"\r\n      >\r\n        Friend has been deleted.\r\n      </ReactBSAlert>\r\n    );\r\n  };\r\n\r\n  const hideAlert = () => {\r\n    setIsLoading(false);\r\n    setAlert(null);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {alert}\r\n      <div className=\"content\">\r\n        {authCtx.isLoggedIn ? (\r\n          <div>\r\n            <Card>\r\n              <CardHeader>\r\n                <h5 className=\"title\">Friends Zone:</h5>\r\n              </CardHeader>\r\n              {isLoading && <LoadingSpinner asOverlay />}\r\n              <CardBody>\r\n                <Table responsive>\r\n                  <thead className=\"text-primary\">\r\n                    <tr>\r\n                      <th className=\"text-center\">First Name</th>\r\n                      <th className=\"text-center\">Last Name</th>\r\n                      <th className=\"text-center\">Email</th>\r\n                      <th className=\"text-center\">Degree</th>\r\n                      <th className=\"text-center\">Remove</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody key=\"tbody\">\r\n                    {authCtx.friends.map((friend, index) => (\r\n                      <tr key={index}>\r\n                        <td\r\n                          onClick={() => trClickHandler(index)}\r\n                          className=\"text-center\"\r\n                        >\r\n                          {friend.first_name}\r\n                        </td>\r\n                        <td\r\n                          onClick={() => trClickHandler(index)}\r\n                          className=\"text-center\"\r\n                        >\r\n                          {friend.last_name}\r\n                        </td>\r\n                        <td\r\n                          onClick={() => trClickHandler(index)}\r\n                          className=\"text-center\"\r\n                        >\r\n                          {friend.email}\r\n                        </td>\r\n                        <td\r\n                          onClick={() => trClickHandler(index)}\r\n                          className=\"text-center\"\r\n                        >\r\n                          {friend.degree}\r\n                        </td>\r\n                        <td className=\"text-center\">\r\n                          <Button\r\n                            color=\"daner\"\r\n                            onClick={() => removeFriendHandler(index)}\r\n                          >\r\n                            Remove\r\n                          </Button>\r\n                        </td>\r\n                      </tr>\r\n                    ))}\r\n                  </tbody>\r\n                </Table>\r\n              </CardBody>\r\n            </Card>\r\n            <Card>\r\n              <CardHeader>\r\n                <h5 className=\"title\">Add Friends:</h5>\r\n              </CardHeader>\r\n              {isLoading && <LoadingSpinner asOverlay />}\r\n              <CardBody>\r\n                <Label>Email Address:</Label>\r\n                <FormGroup className={emailState}>\r\n                  <div>\r\n                    <Input\r\n                      value={email}\r\n                      name=\"email\"\r\n                      type=\"text\"\r\n                      onChange={(e) => changeEmail(e)}\r\n                    />\r\n                    {emailState === \"has-danger\" ? (\r\n                      <label style={{ color: \"red\" }} className=\"error\">\r\n                        Please enter a valid email address.\r\n                      </label>\r\n                    ) : null}\r\n                  </div>\r\n                </FormGroup>\r\n                <Button onClick={addClickHandle} color=\"info\">\r\n                  Add\r\n                </Button>\r\n              </CardBody>\r\n            </Card>\r\n            <Card>\r\n              <CardHeader>\r\n                <h5 className=\"title\">Friends Requests:</h5>\r\n              </CardHeader>\r\n              {isLoading && <LoadingSpinner asOverlay />}\r\n              <CardBody>\r\n                <Table responsive>\r\n                  <thead className=\"text-primary\">\r\n                    <tr>\r\n                      <th className=\"text-center\">First Name</th>\r\n                      <th className=\"text-center\">Last Name</th>\r\n                      <th className=\"text-center\">Add</th>\r\n                      <th className=\"text-center\">Cancel</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody key=\"tbody\">\r\n                    {authCtx.friendsRequests.map((friend, index) => (\r\n                      <tr key={index}>\r\n                        <td className=\"text-center\">{friend.first_name}</td>\r\n                        <td className=\"text-center\">{friend.last_name}</td>\r\n                        <td className=\"text-center\">\r\n                          <Button\r\n                            onClick={() => addClickHandler(index)}\r\n                            color=\"info\"\r\n                          >\r\n                            Add\r\n                          </Button>\r\n                        </td>\r\n                        <td className=\"text-center\">\r\n                          <Button\r\n                            onClick={() => cancelClickHandler(index)}\r\n                            color=\"danger\"\r\n                          >\r\n                            Cancel\r\n                          </Button>\r\n                        </td>\r\n                      </tr>\r\n                    ))}\r\n                  </tbody>\r\n                </Table>\r\n              </CardBody>\r\n            </Card>\r\n          </div>\r\n        ) : (\r\n          <Card style={{ width: \"20cm\", marginLeft: \"7cm\", marginTop: \"2cm\" }}>\r\n            <CardHeader>\r\n              <CardTitle tag=\"h2\">Hello</CardTitle>\r\n            </CardHeader>\r\n            <CardBody>\r\n              <Label tag=\"h4\">\r\n                In order to use our website you must log-in or register.\r\n              </Label>\r\n            </CardBody>\r\n          </Card>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Friends;\r\n","C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\views\\components\\about\\AboutUs.js",[],"C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\views\\forms\\AddGeneralEvent.js",["120","121","122"],"import React from \"react\";\r\n\r\n// react component used to create alerts\r\nimport ReactBSAlert from \"react-bootstrap-sweetalert\";\r\n\r\n//react date tim picker import\r\nimport ReactDatetime from \"react-datetime\";\r\n\r\n// reactstrap components\r\nimport { FormGroup, Label, Row, Col, Input, Form } from \"reactstrap\";\r\n\r\nconst closeButtonStyle = {\r\n  backgroundImage: \"linear-gradient(to bottom left, #fd5d93, #ec250d, #fd5d93)\",\r\n  color: \"#ffffff\",\r\n  borderWidth: \"1px\",\r\n  borderRadius: \"30px\",\r\n  padding: \"8px 18px\",\r\n};\r\n\r\nconst AddGenralEvent = (props) => {\r\n  //state to check repeat values\r\n  const [isMonthly, setIsMonthly] = React.useState(false);\r\n  const [isWeekly, setIsWeekly] = React.useState(false);\r\n  const [repeatState, setReapeatState] = React.useState(\"\");\r\n\r\n  //form states to get user inputes\r\n  const [title, setTitle] = React.useState(\"\");\r\n  const [titleState, setTitleState] = React.useState(\"\");\r\n\r\n  const [description, setDescription] = React.useState(\"\");\r\n  const [startDate, setStartDate] = React.useState(new Date());\r\n  const [endDate, setEndDate] = React.useState(new Date());\r\n  const [address, setAddress] = React.useState(\"\");\r\n\r\n  //all day state\r\n  const [allDay, setAllDay] = React.useState(false);\r\n\r\n  //function check if only one repeat choice was choosen\r\n  const repeatChange = () => {\r\n    if (isWeekly && isMonthly) setReapeatState(\"has-danger\");\r\n    else setReapeatState(\"has-success\");\r\n  };\r\n\r\n  //runs every time that isWeekly state changes\r\n  React.useEffect(() => {\r\n    repeatChange();\r\n  }, [isWeekly]);\r\n\r\n  //runs every time that isMonthly state changes\r\n  React.useEffect(() => {\r\n    repeatChange();\r\n  }, [isMonthly]);\r\n\r\n  //check for title validation\r\n  const changeTitle = (title) => {\r\n    if (title === \"\") {\r\n      setTitleState(\"has-danger\");\r\n    } else {\r\n      setTitleState(\"has-success\");\r\n    }\r\n    setTitle(title);\r\n  };\r\n\r\n  //function send request to the caledar page to add the event by the input values\r\n  const handleConfirm = () => {\r\n    let validation = true;\r\n    let ifRepeat;\r\n\r\n    if (allDay) {\r\n      const startDateUpdate = startDate.setHours(9, 0, 0, 0);\r\n      setStartDate(startDateUpdate);\r\n      const endDateUpdate = endDate.setHours(22, 0, 0, 0);\r\n      setEndDate(endDateUpdate);\r\n    }\r\n\r\n    if (titleState !== \"has-success\" || repeatState !== \"has-success\")\r\n      validation = false;\r\n\r\n    if (repeatState === \"has-success\")\r\n      ifRepeat = isWeekly ? \"weekly\" : isMonthly ? \"monthly\" : \"None\";\r\n    else ifRepeat = \"None\";\r\n\r\n    props.onConfirm(\r\n      title,\r\n      address,\r\n      description,\r\n      ifRepeat,\r\n      startDate,\r\n      endDate,\r\n      \"red\",\r\n      allDay,\r\n      validation\r\n    );\r\n  };\r\n\r\n  //runs each time the page is loading\r\n  React.useEffect(() => {\r\n    if (props.resetDate) {\r\n      setStartDate(new Date(props.resetDate.start.getTime()));\r\n      setEndDate(new Date(props.resetDate.end.getTime()));\r\n    }\r\n  }, []);\r\n\r\n  //changing the dates depanding on date typr (end or start)\r\n  const onDateTimeChange = (selectedDate, date) => {\r\n    if (date === \"start\") {\r\n      setStartDate(selectedDate._d);\r\n    } else {\r\n      setEndDate(selectedDate._d);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ReactBSAlert\r\n      style={{\r\n        height: \"21cm\",\r\n        width: \"21cm\",\r\n        display: \"block\",\r\n        marginTop: \"-100px\",\r\n      }}\r\n      title={\"Add General Schedule\"}\r\n      onConfirm={handleConfirm}\r\n      onCancel={() => props.onCancel()}\r\n      closeBtnStyle={closeButtonStyle}\r\n      confirmBtnBsStyle={titleState === \"has-success\" ? \"success\" : \"title\"}\r\n      cancelBtnBsStyle=\"danger\"\r\n      confirmBtnText=\"Add\"\r\n      cancelBtnText=\"Cancel\"\r\n      showCloseButton\r\n      allowEscape\r\n      showCancel\r\n      btnSize=\"\"\r\n    >\r\n      <Form className=\"form-horizontal\" style={{ marginTop: \"1cm\" }}>\r\n        <Row>\r\n          <Label md=\"3\">Title:</Label>\r\n          <Col md=\"9\">\r\n            <FormGroup>\r\n              <Input\r\n                value={title}\r\n                type=\"text\"\r\n                onChange={(event) => changeTitle(event.target.value)}\r\n              />\r\n              <Row>\r\n                <Label md=\"1\" style={{ fontSize: \"10px\", color: \"red\" }}>\r\n                  *required\r\n                </Label>\r\n              </Row>\r\n            </FormGroup>\r\n\r\n            {titleState === \"has-danger\" && (\r\n              <label style={{ color: \"red\" }} className=\"error\">\r\n                This field is required.\r\n              </label>\r\n            )}\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Label md=\"3\">Pick Starting Date:</Label>\r\n          <Col md=\"9\">\r\n            <FormGroup>\r\n              <ReactDatetime\r\n                onChange={(e) => onDateTimeChange(e, \"start\")}\r\n                selected={startDate}\r\n                value={startDate}\r\n                inputProps={{\r\n                  className: \"form-control\",\r\n                  placeholder: \"Datetime Picker Here\",\r\n                }}\r\n              />\r\n            </FormGroup>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row>\r\n          <Label md=\"3\">Pick Ending Date:</Label>\r\n          <Col md=\"9\">\r\n            <FormGroup>\r\n              <ReactDatetime\r\n                selected={endDate}\r\n                onChange={(e) => onDateTimeChange(e, \"end\")}\r\n                value={endDate}\r\n                inputProps={{\r\n                  className: \"form-control\",\r\n                  placeholder: \"Datetime Picker Here\",\r\n                }}\r\n              />\r\n            </FormGroup>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Label md=\"3\">Description:</Label>\r\n          <Col md=\"9\">\r\n            <FormGroup>\r\n              <Input\r\n                type=\"text\"\r\n                onChange={(event) => setDescription(event.target.value)}\r\n              />\r\n            </FormGroup>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Label md=\"3\">Address:</Label>\r\n          <Col md=\"9\">\r\n            <FormGroup>\r\n              <Input\r\n                type=\"text\"\r\n                onChange={(event) => setAddress(event.target.value)}\r\n              />\r\n            </FormGroup>\r\n          </Col>\r\n        </Row>\r\n        <br />\r\n        <Row>\r\n          <Label sm=\"3\">Repeat: </Label>\r\n          <Col sm=\"6\">\r\n            <FormGroup check inline>\r\n              <Label style={{ color: \"black\" }} check>\r\n                <Input\r\n                  onChange={() => setIsWeekly(!isWeekly)}\r\n                  defaultValue=\"Weekly\"\r\n                  id=\"Weekly\"\r\n                  name=\"WeeklyRepeat\"\r\n                  type=\"checkbox\"\r\n                />\r\n                <span className=\"form-check-sign\" />\r\n                Weekly Repeat\r\n              </Label>\r\n            </FormGroup>\r\n            <FormGroup check inline>\r\n              <Label style={{ color: \"black\" }} check>\r\n                <Input\r\n                  onChange={() => setIsMonthly(!isMonthly)}\r\n                  defaultValue=\"Monthly\"\r\n                  id=\"Monthly\"\r\n                  name=\"MonthlyRepeat\"\r\n                  type=\"checkbox\"\r\n                />\r\n                <span className=\"form-check-sign\" />\r\n                Monthly Repeat\r\n              </Label>\r\n            </FormGroup>\r\n          </Col>\r\n        </Row>\r\n        {repeatState === \"has-danger\" ? (\r\n          <Row>\r\n            <Col md=\"9\">\r\n              <Label style={{ color: \"red\" }} className=\"error\">\r\n                You can`t pick 2 checkbox.\r\n              </Label>\r\n            </Col>\r\n          </Row>\r\n        ) : null}\r\n        <br />\r\n        <Row>\r\n          <Label sm=\"3\"></Label>\r\n          <Col sm=\"3\">\r\n            <FormGroup check inline>\r\n              <Label style={{ color: \"black\" }} check>\r\n                <Input\r\n                  onChange={() => setAllDay(!allDay)}\r\n                  defaultValue=\"all_day\"\r\n                  id=\"all_day\"\r\n                  name=\"all_day\"\r\n                  type=\"checkbox\"\r\n                />\r\n                <span className=\"form-check-sign\" />\r\n                All day event\r\n              </Label>\r\n            </FormGroup>\r\n          </Col>\r\n        </Row>\r\n        <br />\r\n        <br />\r\n        <Row>\r\n          <img\r\n            style={{\r\n              height: \"4cm\",\r\n              width: \"8cm\",\r\n              marginLeft: \"auto\",\r\n              marginRight: \"auto\",\r\n            }}\r\n            alt=\"Back\"\r\n            src={require(\"assets/img/task.jpg\").default}\r\n          />\r\n        </Row>\r\n      </Form>\r\n      <br />\r\n    </ReactBSAlert>\r\n  );\r\n};\r\n\r\nexport default AddGenralEvent;\r\n","C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\views\\forms\\AddEventAlert.js",["123","124"],"import React from \"react\";\r\n\r\n// react component used to create alerts\r\nimport ReactBSAlert from \"react-bootstrap-sweetalert\";\r\n\r\n//react date tim picker import\r\nimport ReactDatetime from \"react-datetime\";\r\n\r\n// reactstrap components\r\nimport { FormGroup, Label, Input, Row, Col, Form } from \"reactstrap\";\r\n\r\nconst closeButtonStyle = {\r\n  backgroundImage: \"linear-gradient(to bottom left, #fd5d93, #ec250d, #fd5d93)\",\r\n  color: \"#ffffff\",\r\n  borderWidth: \"1px\",\r\n  borderRadius: \"30px\",\r\n  padding: \"8px 18px\",\r\n};\r\n\r\nconst AddNewEventAlert = (props) => {\r\n  //states to form input values\r\n  const [color, setColor] = React.useState(\"blue\");\r\n  const [startDate, setStartDate] = React.useState(new Date());\r\n  const [endDate, setEndDate] = React.useState(new Date());\r\n  const [description, setDescription] = React.useState(\"\");\r\n  const [address, setAddress] = React.useState(\"\");\r\n\r\n  //states to check if the event as to repeat\r\n  const [isMonthly, setIsMonthly] = React.useState(false);\r\n  const [isWeekly, setIsWeekly] = React.useState(false);\r\n  const [repeatState, setReapeatState] = React.useState(\"\");\r\n\r\n  //all day state\r\n  const [allDay, setAllDay] = React.useState(false);\r\n\r\n  //runs every time that isWeekly state changes\r\n  React.useEffect(() => {\r\n    repeatChange();\r\n  }, [isWeekly]);\r\n\r\n  //runs every time that isMonthly state changes\r\n  React.useEffect(() => {\r\n    repeatChange();\r\n  }, [isMonthly]);\r\n\r\n  //function check if only one repeat choise was choosen\r\n  const repeatChange = () => {\r\n    if (isWeekly && isMonthly) setReapeatState(\"has-danger\");\r\n    else setReapeatState(\"has-success\");\r\n  };\r\n\r\n  //The function changes the color value according to the title\r\n  const { title } = props;\r\n  React.useEffect(() => {\r\n    if (title === \"Workout\") {\r\n      setColor(\"workout\");\r\n    } else if (title === \"Work\") {\r\n      setColor(\"work\");\r\n    } else if (title === \"Medical Care\") {\r\n      setColor(\"azure\");\r\n    } else if (title === \"General\") {\r\n      setColor(\"red\");\r\n    }\r\n  }, [title]);\r\n\r\n  //changing the dates depanding on date typr (end or start)\r\n  const onDateTimeChange = (selectedDate, date) => {\r\n    if (date === \"start\") {\r\n      setStartDate(selectedDate._d);\r\n    } else {\r\n      setEndDate(selectedDate._d);\r\n    }\r\n  };\r\n\r\n  //function send request to the caledar page to add the event by the input values\r\n  const handleConfirm = () => {\r\n    let validation = true;\r\n    let ifRepeat;\r\n\r\n    if (allDay) {\r\n      let startDateUpdate = startDate.setHours(9, 0, 0, 0);\r\n      setStartDate(startDateUpdate);\r\n      let endDateUpdate = endDate.setHours(22, 0, 0, 0);\r\n      setEndDate(endDateUpdate);\r\n    }\r\n\r\n    if (repeatState === \"has-success\")\r\n      ifRepeat = isWeekly ? \"weekly\" : isMonthly ? \"monthly\" : \"None\";\r\n    else ifRepeat = \"None\";\r\n\r\n    props.onConfirm(\r\n      props.title,\r\n      address,\r\n      description,\r\n      ifRepeat,\r\n      startDate,\r\n      endDate,\r\n      color,\r\n      allDay,\r\n      validation\r\n    );\r\n  };\r\n\r\n  return (\r\n    <ReactBSAlert\r\n      style={{\r\n        height: \"20cm\",\r\n        width: \"20cm\",\r\n        display: \"block\",\r\n        marginTop: \"-100px\",\r\n      }}\r\n      title={\"Add \" + props.title + \" Schedule\"}\r\n      onConfirm={handleConfirm}\r\n      onCancel={() => props.onCancel()}\r\n      closeBtnStyle={closeButtonStyle}\r\n      confirmBtnBsStyle=\"success\"\r\n      cancelBtnBsStyle=\"danger\"\r\n      confirmBtnText=\"Add\"\r\n      cancelBtnText=\"Cancel\"\r\n      showCloseButton\r\n      allowEscape\r\n      showCancel\r\n      btnSize=\"\"\r\n    >\r\n      <Form className=\"form-horizontal\" style={{ marginTop: \"2cm\" }}>\r\n        <Row>\r\n          <Label md=\"3\">Pick Starting Date:</Label>\r\n          <Col md=\"9\">\r\n            <FormGroup>\r\n              <ReactDatetime\r\n                value={startDate}\r\n                onChange={(e) => onDateTimeChange(e, \"start\")}\r\n                inputProps={{\r\n                  className: \"form-control\",\r\n                  placeholder: \"Datetime Picker Here\",\r\n                }}\r\n              />\r\n            </FormGroup>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row>\r\n          <Label md=\"3\">Pick Ending Date:</Label>\r\n          <Col md=\"9\">\r\n            <FormGroup>\r\n              <ReactDatetime\r\n                value={endDate}\r\n                onChange={(e) => onDateTimeChange(e, \"end\")}\r\n                inputProps={{\r\n                  className: \"form-control\",\r\n                  placeholder: \"Datetime Picker Here\",\r\n                }}\r\n              />\r\n            </FormGroup>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Label md=\"3\">Description:</Label>\r\n          <Col md=\"9\">\r\n            <FormGroup>\r\n              <Input\r\n                type=\"text\"\r\n                onChange={(event) => setDescription(event.target.value)}\r\n              />\r\n            </FormGroup>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Label md=\"3\">Address:</Label>\r\n          <Col md=\"9\">\r\n            <FormGroup>\r\n              <Input\r\n                type=\"text\"\r\n                onChange={(event) => setAddress(event.target.value)}\r\n              />\r\n            </FormGroup>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Label md=\"3\">Repeat:</Label>\r\n          <Col md=\"7\">\r\n            <FormGroup check inline>\r\n              <Label style={{ color: \"black\" }} check>\r\n                <Input\r\n                  onChange={() => setIsWeekly(!isWeekly)}\r\n                  defaultValue=\"Weekly\"\r\n                  id=\"Weekly\"\r\n                  name=\"WeeklyRepeat\"\r\n                  type=\"checkbox\"\r\n                />\r\n                <span className=\"form-check-sign\" />\r\n                Weekly Repeat\r\n              </Label>\r\n            </FormGroup>\r\n            <FormGroup check inline>\r\n              <Label style={{ color: \"black\" }} check>\r\n                <Input\r\n                  onChange={() => setIsMonthly(!isMonthly)}\r\n                  defaultValue=\"Monthly\"\r\n                  id=\"Monthly\"\r\n                  name=\"MonthlyRepeat\"\r\n                  type=\"checkbox\"\r\n                />\r\n                <span className=\"form-check-sign\" />\r\n                Monthly Repeat\r\n              </Label>\r\n            </FormGroup>\r\n          </Col>\r\n        </Row>\r\n\r\n        {repeatState === \"has-danger\" ? (\r\n          <Row>\r\n            <Col md=\"10\">\r\n              <Label style={{ color: \"red\" }} className=\"error\">\r\n                You can`t pick 2 checkbox.\r\n              </Label>\r\n            </Col>\r\n          </Row>\r\n        ) : null}\r\n        <br />\r\n        <Row>\r\n          <Label sm=\"3\"></Label>\r\n          <Col sm=\"4\">\r\n            <FormGroup check inline>\r\n              <Label style={{ color: \"black\" }} check>\r\n                <Input\r\n                  onChange={() => setAllDay(!allDay)}\r\n                  defaultValue=\"all_day\"\r\n                  id=\"all_day\"\r\n                  name=\"all_day\"\r\n                  type=\"checkbox\"\r\n                />\r\n                <span className=\"form-check-sign\" />\r\n                All day event\r\n              </Label>\r\n            </FormGroup>\r\n          </Col>\r\n        </Row>\r\n        <br />\r\n        <Row>\r\n          <img\r\n            style={{\r\n              height: \"4cm\",\r\n              width: \"8cm\",\r\n              marginLeft: \"auto\",\r\n              marginRight: \"auto\",\r\n            }}\r\n            alt=\"Back\"\r\n            src={require(\"assets/img/\" + props.title + \".jpg\").default}\r\n          />\r\n        </Row>\r\n      </Form>\r\n      <br />\r\n      <br />\r\n    </ReactBSAlert>\r\n  );\r\n};\r\n\r\nexport default AddNewEventAlert;\r\n","C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\views\\forms\\AddMultiStudentEvent.js",[],"C:\\Users\\Chen\\Desktop\\KalenaProject\\Kalena_project\\frontend\\src\\views\\forms\\UpdateEventAlert.js",[],{"ruleId":"125","severity":1,"message":"126","line":93,"column":6,"nodeType":"127","endLine":93,"endColumn":8,"suggestions":"128"},{"ruleId":"125","severity":1,"message":"129","line":834,"column":6,"nodeType":"127","endLine":840,"endColumn":4,"suggestions":"130"},{"ruleId":"125","severity":1,"message":"131","line":18,"column":6,"nodeType":"127","endLine":18,"endColumn":8,"suggestions":"132"},{"ruleId":"133","severity":1,"message":"134","line":164,"column":9,"nodeType":"135","messageId":"136","endLine":169,"endColumn":10,"fix":"137"},{"ruleId":"133","severity":1,"message":"134","line":176,"column":9,"nodeType":"135","messageId":"136","endLine":181,"endColumn":10,"fix":"138"},{"ruleId":"125","severity":1,"message":"139","line":56,"column":6,"nodeType":"127","endLine":56,"endColumn":26,"suggestions":"140"},{"ruleId":"125","severity":1,"message":"141","line":448,"column":6,"nodeType":"127","endLine":448,"endColumn":23,"suggestions":"142"},{"ruleId":"143","severity":1,"message":"144","line":105,"column":29,"nodeType":"145","messageId":"146","endLine":105,"endColumn":30},{"ruleId":"125","severity":1,"message":"147","line":108,"column":6,"nodeType":"127","endLine":108,"endColumn":28,"suggestions":"148"},{"ruleId":"125","severity":1,"message":"149","line":309,"column":5,"nodeType":"127","endLine":309,"endColumn":19,"suggestions":"150"},{"ruleId":"125","severity":1,"message":"151","line":325,"column":6,"nodeType":"127","endLine":325,"endColumn":20,"suggestions":"152"},{"ruleId":"125","severity":1,"message":"153","line":47,"column":6,"nodeType":"127","endLine":47,"endColumn":16,"suggestions":"154"},{"ruleId":"125","severity":1,"message":"153","line":52,"column":6,"nodeType":"127","endLine":52,"endColumn":17,"suggestions":"155"},{"ruleId":"125","severity":1,"message":"156","line":102,"column":6,"nodeType":"127","endLine":102,"endColumn":8,"suggestions":"157"},{"ruleId":"125","severity":1,"message":"153","line":39,"column":6,"nodeType":"127","endLine":39,"endColumn":16,"suggestions":"158"},{"ruleId":"125","severity":1,"message":"153","line":44,"column":6,"nodeType":"127","endLine":44,"endColumn":17,"suggestions":"159"},"react-hooks/exhaustive-deps","React Hook useCallback has missing dependencies: 'getEvents', 'getFriends', 'getFriendsRequest', 'getInvitations', and 'getUserData'. Either include them or remove the dependency array.","ArrayExpression",["160"],"React Hook useEffect has a missing dependency: 'userDataIntervalHandler'. Either include it or remove the dependency array.",["161"],"React Hook React.useEffect has missing dependencies: 'getCollapseStates' and 'props.routes'. Either include them or remove the dependency array. If 'setState' needs the current value of 'props.routes', you can also switch to useReducer instead of useState and read 'props.routes' in the reducer.",["162"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","noTargetBlank",{"range":"163","text":"164"},{"range":"165","text":"164"},"React Hook React.useEffect has a missing dependency: 'updateEvents'. Either include it or remove the dependency array.",["166"],"React Hook React.useEffect has a missing dependency: 'eventsLength'. Either include it or remove the dependency array.",["167"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["168"],"React Hook useCallback has a missing dependency: 'authCtx.friends'. Either include it or remove the dependency array.",["169"],"React Hook React.useEffect has missing dependencies: 'alertCommonMeeting', 'currentFriendIndex', and 'mutualEventsaAreTotallyRendered'. Either include them or remove the dependency array.",["170"],"React Hook React.useEffect has a missing dependency: 'repeatChange'. Either include it or remove the dependency array.",["171"],["172"],"React Hook React.useEffect has a missing dependency: 'props.resetDate'. Either include it or remove the dependency array.",["173"],["174"],["175"],{"desc":"176","fix":"177"},{"desc":"178","fix":"179"},{"desc":"180","fix":"181"},[5253,5253]," rel=\"noreferrer\"",[5568,5568],{"desc":"182","fix":"183"},{"desc":"184","fix":"185"},{"desc":"186","fix":"187"},{"desc":"188","fix":"189"},{"desc":"190","fix":"191"},{"desc":"192","fix":"193"},{"desc":"194","fix":"195"},{"desc":"196","fix":"197"},{"desc":"192","fix":"198"},{"desc":"194","fix":"199"},"Update the dependencies array to be: [getEvents, getFriends, getFriendsRequest, getInvitations, getUserData]",{"range":"200","text":"201"},"Update the dependencies array to be: [token, userId, holidays.length, coursesAsEvents.length, newCoursesAsEventsLength, userDataIntervalHandler]",{"range":"202","text":"203"},"Update the dependencies array to be: [getCollapseStates, props.routes]",{"range":"204","text":"205"},"Update the dependencies array to be: [authCtx.userEvents, updateEvents]",{"range":"206","text":"207"},"Update the dependencies array to be: [auth.userEvents, eventsLength]",{"range":"208","text":"209"},"Update the dependencies array to be: [authCtx.finishLoggin, history]",{"range":"210","text":"211"},"Update the dependencies array to be: [authCtx.friends, mutualEvents]",{"range":"212","text":"213"},"Update the dependencies array to be: [alertCommonMeeting, currentFriendIndex, mutualEvents, mutualEventsaAreTotallyRendered]",{"range":"214","text":"215"},"Update the dependencies array to be: [isWeekly, repeatChange]",{"range":"216","text":"217"},"Update the dependencies array to be: [isMonthly, repeatChange]",{"range":"218","text":"219"},"Update the dependencies array to be: [props.resetDate]",{"range":"220","text":"221"},{"range":"222","text":"217"},{"range":"223","text":"219"},[3317,3319],"[getEvents, getFriends, getFriendsRequest, getInvitations, getUserData]",[25909,26022],"[token, userId, holidays.length, coursesAsEvents.length, newCoursesAsEventsLength, userDataIntervalHandler]",[538,540],"[getCollapseStates, props.routes]",[1392,1412],"[authCtx.userEvents, updateEvents]",[11787,11804],"[auth.userEvents, eventsLength]",[2727,2749],"[authCtx.finishLoggin, history]",[9704,9718],"[authCtx.friends, mutualEvents]",[10186,10200],"[alertCommonMeeting, currentFriendIndex, mutualEvents, mutualEventsaAreTotallyRendered]",[1539,1549],"[isWeekly, repeatChange]",[1658,1669],"[isMonthly, repeatChange]",[2942,2944],"[props.resetDate]",[1290,1300],[1409,1420]]